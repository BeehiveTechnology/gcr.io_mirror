name: gcr.io_mirror
on: 
  issues:
    types: [opened]
  label:
    types: [created]
  workflow_dispatch:


jobs:
  build:
    runs-on: ubuntu-latest
    
    outputs:
      GCR_IMAGE: ${{ steps.pullIssuesPorter.outputs.GCR_IMAGE }}
      ISSUE_NUMBER: ${{ steps.pullIssuesPorter.outputs.ISSUE_NUMBER }}
    steps:
    - name: Log into docker hub
      uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}
        
    - name: get porter issues
      id: pullIssuesPorter
      uses: actions/github-script@v3.1.0
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const issuesResponse = await github.issues.listForRepo({
              owner: '${{ secrets.GIT_OWNER }}',
              repo: '${{ secrets.GIT_REPO }}',
              state: "open",
              labels: "porter",
              sort: "created",
              direction: "desc",
              per_page: 1
          })
          let gcr_image
          let issue_number = -1
          if (Array.isArray(issuesResponse["data"]) && issuesResponse["data"].length) {
            let title = issuesResponse["data"][0]["title"]
            let start = 0
            if (title.includes("[PORTER]")){
                start = 8
            }
            gcr_image = issuesResponse["data"][0]["title"].substring(start).trim()
            issue_number = issuesResponse["data"][0]["number"]
          }
          console.log("gcr_image from issues is ", gcr_image,", issue_number is ",issue_number)
          core.setOutput('GCR_IMAGE', gcr_image)
          core.setOutput('ISSUE_NUMBER', issue_number)
